{"version":3,"sources":["components/Filters/index.js","components/TodoItem/index.js","mocked.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","todos","changeFilter","currentCategory","uniqueSetOfCategories","Set","map","todo","category","optionsJSX","forEach","push","key","value","className","onChange","event","target","handleChangeCategory","TodoItem","toggleIsCompleted","id","onClick","type","checked","isDone","readOnly","description","initialTodos","App","useState","setTodos","filteredTodos","setFilteredTodos","descriptionQuery","setDescriptionQuery","categoryQuery","setCategoryQuery","setCurrentCategory","useEffect","filterTodos","tempTodos","currentTodo","find","allTodoItems","filter","TodoListJSX","e","placeholder","role","aria-label","length","uuidv4","selectedCategory","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af8dfdb3.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Filters = (props) => {\n\n    const {todos, changeFilter, currentCategory} = props;\n\n    const uniqueSetOfCategories = new Set(todos.map(todo => todo.category));\n\n    let optionsJSX = [];\n\n    uniqueSetOfCategories.forEach((category) => {\n        optionsJSX.push(<option key={category} value={category}>{category}</option>);\n    });\n\n    const handleChangeCategory = event => {\n        changeFilter(event.target.value);\n    };\n\n    return (\n        <div className='App'>\n            <select onChange={(event) => handleChangeCategory(event)} value={currentCategory}>\n                {optionsJSX}\n            </select>\n        </div>\n    );\n};","import React from 'react';\n\nexport const TodoItem = (props) => {\n    const {todo, toggleIsCompleted} = props;\n    return (\n        <li key={todo.id} onClick={() => toggleIsCompleted(todo.id)}>\n            <input type='checkbox'\n                   checked={todo.isDone}\n                   readOnly\n            />\n            {todo.isDone\n                ?\n                <strike>{todo.description + ' ' + todo.category}</strike>\n                :\n                todo.description + ' ' + todo.category}\n        </li>\n    );\n};","export const initialTodos = [\n    {\n        id: 'ea47ca06-afcb-46ac-953b-d7211a5db98a',\n        description: 'Laundry',\n        category: 'Home',\n        isDone: false,\n    },\n    {\n        id: '520a8762-0d0c-4c07-a5a0-c05701d740a1',\n        description: 'Make a presentation',\n        category: 'Office',\n        isDone: true,\n    },\n    {\n        id: '520a8762-0d0c-4c07-a5a0-c05701d740a2',\n        description: 'Do the release`',\n        category: 'Office',\n        isDone: false,\n    },\n];","import React, {useEffect, useState} from 'react';\nimport {Filters} from './components/Filters';\nimport {v4 as uuidv4} from 'uuid';\nimport {TodoItem} from './components/TodoItem';\nimport {initialTodos} from './mocked';\nimport './App.css';\n\nconst App = () => {\n\n    const [todos, setTodos] = useState(initialTodos);\n    const [filteredTodos, setFilteredTodos] = useState(initialTodos);\n    const [descriptionQuery, setDescriptionQuery] = useState('');\n    const [categoryQuery, setCategoryQuery] = useState('Office');\n    const [currentCategory, setCurrentCategory] = useState('Office');\n\n    useEffect(() => {\n        setFilteredTodos(filterTodos(todos, currentCategory));\n    }, [currentCategory, todos]);\n\n    const addTodo = () => {\n        if (descriptionQuery.length > 0 && categoryQuery.length > 0) {\n            setDescriptionQuery('');\n            setTodos([...todos, {id: uuidv4(), description: descriptionQuery, category: categoryQuery, isDone: false}]);\n            filterTodos(todos, currentCategory)\n        }\n    };\n\n    const toggleIsCompleted = (id) => {\n\n        const tempTodos = [...todos];\n        const currentTodo = tempTodos.find(todo => todo.id === id);\n        currentTodo.isDone = !currentTodo.isDone;\n        setTodos(tempTodos);\n    };\n\n\n    const changeFilter = (selectedCategory) => {\n        setCurrentCategory(selectedCategory);\n    };\n\n    const filterTodos = (allTodoItems, currentCategory) => {\n        return allTodoItems.filter(todo => todo.category === currentCategory);\n    };\n\n    const TodoListJSX = filteredTodos.map(todo =>\n        <TodoItem\n            key={todo.id}\n            todo={todo}\n            toggleIsCompleted={toggleIsCompleted}\n        />);\n\n    return (\n        <div className='App'>\n            <section className='column'>\n                <h1>Todo</h1>\n                <ul>{TodoListJSX}</ul>\n                <div className='add-item'>\n                    <input value={descriptionQuery} onChange={e => setDescriptionQuery(e.target.value)} placeholder='add a task...'/>\n                    <input value={categoryQuery} onChange={e => setCategoryQuery(e.target.value)}/>\n                    <span role=\"img\" aria-label=\"+\" className='plus' onClick={() => addTodo()}> âž•</span>\n                </div>\n            </section>\n            <section className='column'>\n                <Filters\n                    todos={todos}\n                    changeFilter={changeFilter}\n                    currentCategory={currentCategory}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}